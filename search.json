[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Social Science Research Methods",
    "section": "",
    "text": "First Task\nOur very first task is to install R and R Studio on our laptops.\nPlease try do this before coming to next lab.\nR and R Studio are very powerful tools for analysing data and for creating high-quality documents. I prepared this website using R Studio. It is widely used both in academic research and in commercial enterprise. Learning the fundamentals of these powerful tools gives you an advantage in the job market (or for pursuing further studies such as PhD). They are free and open source.\nMake sure to install R first and then the R Studio.\nInstructions for installing R and R Studio are available in Appendix A of the Online Textbook Hands-on Programming with R.",
    "crumbs": [
      "Welcome to Lab Website"
    ]
  },
  {
    "objectID": "index.html#first-task",
    "href": "index.html#first-task",
    "title": "Social Science Research Methods",
    "section": "",
    "text": "R can be installed here: https://cran.r-project.org/\nR Studio can be install here: https://posit.co/downloads/",
    "crumbs": [
      "Welcome to Lab Website"
    ]
  },
  {
    "objectID": "01_rbasics.html",
    "href": "01_rbasics.html",
    "title": "1  R Basics",
    "section": "",
    "text": "1.1 Objectives for Week 1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "01_rbasics.html#objectives-for-week-1",
    "href": "01_rbasics.html#objectives-for-week-1",
    "title": "1  R Basics",
    "section": "",
    "text": "Use R as a calculator\nWrite and execute a command by using R Studio text editor\nSave your script\nUse the assignment operator to create objects\nUnderstand the difference between ‘string’ and ‘numerical’\nCreate a simple dataset",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "01_rbasics.html#use-r-as-a-calculator",
    "href": "01_rbasics.html#use-r-as-a-calculator",
    "title": "1  R Basics",
    "section": "1.2 Use R as a calculator",
    "text": "1.2 Use R as a calculator\nGo to the console pane and type a simple calculation.\n\n1 + 3\n#&gt; [1] 4\n\n\n\n\n\n\n\nFigure 1.2: Our first calculation\n\n\n\nAs you can see, the output for 1 + 3 is 4, which is correct. We directly did a calculation using the console.\nThis would work, but it is not a good approach. Do not write your code directly to the console. Instead, go to the top left pane and write your ‘code’ into the text editor. The calculation 1 + 3 here is your code.\n\nSave your script by File &gt;&gt; Save OR simply by pressing . It is a good idea to create a folder/directory for this module and give your script an intuitive name such as learn_01.R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "01_rbasics.html#assignment-operator-to-create-objects",
    "href": "01_rbasics.html#assignment-operator-to-create-objects",
    "title": "1  R Basics",
    "section": "1.3 Assignment operator to create objects",
    "text": "1.3 Assignment operator to create objects\nWe can create objects in R which store our data. For example, you would like to calculate your age. Current year (i.e., 2024) - your birth year gives your age.\nLet’s create an object which stores your year of birth. We are going to call it my_birth_year. Each R object must be one-word only, so I use _ instead of space. We could also have used a dot or dash.\n\n# This is a comment. \n# Characters after a hashtag are considered as comments by R. \n# They are not executed.\n# Use comments extensively to take notes \n# and to remind your future self of the work you did. \n\n# \"&lt;-\" is the assignment operator\n# It basically symbolizes an arrow.\n\nmy_birth_year &lt;- 1985\n\nNow the Environment should store an object called my_birth_year. When I run my_birth_year, R will display the information stored.\n\nmy_birth_year\n#&gt; [1] 1985\n\nNote that R is case sensitive. If you mistype, such as My_birth_year, it will give you an error message.\n\nMy_birth_year\n#&gt; Error in eval(expr, envir, enclos): object 'My_birth_year' not found\n\nWe can find your age by subtracting current year from my_birth_year.\n\n2024 - my_birth_year\n#&gt; [1] 39\n\nWe typed 2024 manually. We might want to create another object called current_year. Try to do it yourself, as an exercise.\n\n\nShow the code\ncurrent_year &lt;- 2024\n\n\nYou can do operations using objects. For example, calculate your age using the objects current_year and my_birth_year. Store this in another object called my_age.\n\nmy_age &lt;- current_year - my_birth_year \n\nCheck if you did correctly.\n\nmy_age\n#&gt; [1] 39\n\nYou can also write over an object.\n\ncurrent_year &lt;- 2030\ncurrent_year\n#&gt; [1] 2030\n\nThis would not change outputs previously created using the older version of the objects.\n\nmy_age\n#&gt; [1] 39\n\nObviously, current year is not 2030, so let’s correct it back.\n\ncurrent_year &lt;- 2024",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "01_rbasics.html#numerical-and-string-objects",
    "href": "01_rbasics.html#numerical-and-string-objects",
    "title": "1  R Basics",
    "section": "1.4 Numerical and String Objects",
    "text": "1.4 Numerical and String Objects\nSo far, we stored numerical data. We can also have textual information, such as name of a person, or type of a medicine.\nCreate an object called my_name and store your name there.\n\nmy_name &lt;- \"Baris\"\nmy_name\n#&gt; [1] \"Baris\"\n\nAs you can see, R displays textual information within quotation (““). Any information stored or displayed within ’’ is called a string and refers to text.\nCreate an object called my_name_last and store your name there.\n\nmy_last_name &lt;- \"Ari\"\n\nObviously, you cannot make a calculation using words. It is nonsensical to subtract two words. You cannot do any calculation with words.\n\nmy_name_last - my_name\n#&gt; Error in eval(expr, envir, enclos): object 'my_name_last' not found\n\nSometimes numerical information is stored as text. In that case, R will not consider it as a number. For example, see three objects below.\n\nnum1 &lt;- 10\nnum2 &lt;- 100\nnum3 &lt;- \"1000\"\n\nnum1 and num2 are numerical values, but num3 is text. You cannot do any calculation with that.\n\nnum1\n#&gt; [1] 10\n\nnum2\n#&gt; [1] 100\n\nnum3\n#&gt; [1] \"1000\"\n\nnum1 + num2\n#&gt; [1] 110\n\nnum1 + num3\n#&gt; Error in num1 + num3: non-numeric argument to binary operator",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "01_rbasics.html#create-a-simple-dataset",
    "href": "01_rbasics.html#create-a-simple-dataset",
    "title": "1  R Basics",
    "section": "1.5 Create a simple dataset",
    "text": "1.5 Create a simple dataset\nImagine that we have the names and birth years of a number of people. We cannot really hold each piece of information in separate objects. We would like to store them altogether in a single object, like a spreadsheet.\nLet’s start with names. We have eight people:\n\nKeir Starmer\nRishi Sunak\nLiz Truss\nBoris Johnson\nTheresa May\nDavid Cameron\nGordon Brown\nTony Blair\n\nWe can store their full names in a single object using the combine function c().\n\nnames_pm &lt;- c(\"Keir Starmer\",\n              \"Rishi Sunak\",\n              \"Liz Truss\",\n              \"Boris Johnson\",\n              \"Theresa May\",\n              \"David Cameron\",\n              \"Gordon Brown\",\n              \"Tony Blair\")\n\nNote that each PMs name is written within quotation and they are combined together with the function c(). Each item within c() is separated with a comma. Let’s see the object:\n\nnames_pm\n#&gt; [1] \"Keir Starmer\"  \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\"\n#&gt; [5] \"Theresa May\"   \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nGreat! We have the names of the last six UK PMs.\nYou may have realized that there are numbers in squared brackets in the beginning of each line.\nThese numbers refer to the order in the sequence. For example, “Keir Starmer” is the first item whereas “Theresa May” is the fifth.\nYou can recall a particular item in the object using square brackets. Let’s print the first item in names_pm.\n\nnames_pm[1]\n#&gt; [1] \"Keir Starmer\"\n\nSimilarly, for the third item, you would use [3]:\n\nnames_pm[3]\n#&gt; [1] \"Liz Truss\"\n\nFind the fifth name in the object.\n\nnames_pm[5]\n#&gt; [1] \"Theresa May\"\n\nYou can add more than one number into the square brackets using the c() function. For example, who are the second and fourth names?\n\nnames_pm[c(2,4)]\n#&gt; [1] \"Rishi Sunak\"   \"Boris Johnson\"\n\nNext, let’s write down their birth year. The order is important! You need to keep the same order with PMs.\n\nbirth_years &lt;- c(1962, # Keir Starmer\n                 1980, # Rishi Sunak\n                 1975, # Liz Truss\n                 1964, # Boris Johnson\n                 1956, # Theresa May\n                 1966, # David Cameron\n                 1951, # Gordon Brown\n                 1953  # Tony Blair)\n                 )\n\nCheck the object we just created.\n\nbirth_years\n#&gt; [1] 1962 1980 1975 1964 1956 1966 1951 1953\n\nLet’s put them together in a spreadsheet. What we would like to do is to vertically bind the two objects, which is called column bind and denoted with cbind().\n\ncbind(names_pm, birth_years)\n#&gt;      names_pm        birth_years\n#&gt; [1,] \"Keir Starmer\"  \"1962\"     \n#&gt; [2,] \"Rishi Sunak\"   \"1980\"     \n#&gt; [3,] \"Liz Truss\"     \"1975\"     \n#&gt; [4,] \"Boris Johnson\" \"1964\"     \n#&gt; [5,] \"Theresa May\"   \"1956\"     \n#&gt; [6,] \"David Cameron\" \"1966\"     \n#&gt; [7,] \"Gordon Brown\"  \"1951\"     \n#&gt; [8,] \"Tony Blair\"    \"1953\"\n\nSo far, we just printed this on our screen but we have not stored it in an object. Put this into an object.\n\nmy_data &lt;- cbind(names_pm, birth_years)\n\nCheck my_data.\n\nmy_data\n#&gt;      names_pm        birth_years\n#&gt; [1,] \"Keir Starmer\"  \"1962\"     \n#&gt; [2,] \"Rishi Sunak\"   \"1980\"     \n#&gt; [3,] \"Liz Truss\"     \"1975\"     \n#&gt; [4,] \"Boris Johnson\" \"1964\"     \n#&gt; [5,] \"Theresa May\"   \"1956\"     \n#&gt; [6,] \"David Cameron\" \"1966\"     \n#&gt; [7,] \"Gordon Brown\"  \"1951\"     \n#&gt; [8,] \"Tony Blair\"    \"1953\"\n\nNote that birth_years are stored as text, not numbers. I know this because they are within quotation marks.\nIt is customary to keep spreadsheets as something called “data frames” in R. This will not change our data, but makes further operations easier by unlocking some of the features of R.\n\nmy_data &lt;- as.data.frame(my_data)\n\nWe can take a better look at the dataset using View() function.\n\nView(my_data)\n\nLet’s save our script.\n\n1.5.1 Variables in a data frame\nColumns in a data frame are also called variables. We have two variables in the dataset:\n\nnames_pm : Name of the UK PM\nbirth_years: Birth year of the PM\n\nThere are a few ways to access a variable. A straightforward approach is to use the $ notation:\n\n# 'name of the data frame'$'name of the variable' \nmy_data$names_pm\n#&gt; [1] \"Keir Starmer\"  \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\"\n#&gt; [5] \"Theresa May\"   \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nNow it is your turn. Display the birth_years variable.\n\nmy_data$birth_years\n#&gt; [1] \"1962\" \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\nYou can think this expression as a sentence in R. In plain English, this expression tells R to bring the variable names_pm within the data frame my_data. The symbol $ refers to the ‘within’ part of this sentence.\nJust like you can convey the same meaning using different sentence structures, there are different ways to do the same thing in R. This is because R is working exactly like a language: it is a language to communicate with the computer.\nAnother way is using the square brackets notation []. names_pm is the first column in the data frame. To get the variable, you could type the following:\n\nmy_data[,1]\n#&gt; [1] \"Keir Starmer\"  \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\"\n#&gt; [5] \"Theresa May\"   \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nNote that we did not simply write my_data[1]. There is a comma: my_data[,1]\nIn a spreadsheet, we have two dimensions: rows and columns. By convention, rows are considered as the first dimension, and columns are considered as the second. This is why we had to use a comma to designate that we are interested in columns. If left the first dimension unspecified, which tells R to bring everything.\nIf you want to get the first row, you would type the following:\n\nmy_data[1, ]\n#&gt;       names_pm birth_years\n#&gt; 1 Keir Starmer        1962\n\nTry it yourself; get the fourth row.\n\n\nShow the code\nmy_data[4,]\n#&gt;        names_pm birth_years\n#&gt; 4 Boris Johnson        1964\n\n\nLet’s put these together: you can tell R to bring a specific observation. For example, third row of second column.\n\nmy_data[3,2]\n#&gt; [1] \"1975\"\n\nYou can also ask for multiple items by plugging in the combine function.\n\nmy_data[c(3,4), 2]\n#&gt; [1] \"1975\" \"1964\"\n\nConsider the command above. Try to formulate it in plain English. What does it tell to do R?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>R Basics</span>"
    ]
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Introduction to Modern Statistics (2e)",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#introduction-to-modern-statistics-2e",
    "href": "resources.html#introduction-to-modern-statistics-2e",
    "title": "Resources",
    "section": "",
    "text": "Introduction to Modern Statistics by Mine Çetinkaya-Rundel and Johanna Hardin is an excellent textbook for learning foundational concepts in statistics and data analysis while learning R.\nThe online textbook is free and available at https://openintro-ims.netlify.app/.\nAlso see http://openintro.org/book/ims for supplementary materials and additional resources.",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#hands-on-programming-with-r",
    "href": "resources.html#hands-on-programming-with-r",
    "title": "Resources",
    "section": "Hands-On Programming with R",
    "text": "Hands-On Programming with R\n\n\nHands-on Programming with R by Garrett Grolemund is a straightforward introduction to R. It is useful to learn the basics of R notation.\nWe cover most of the content in Part 1 & 2 in the first four weeks, but if you want to approach the same content from a different angle, you will find this textbook useful.\nIt is freely available here: https://rstudio-education.github.io/hopr/",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#r-for-data-science-2e",
    "href": "resources.html#r-for-data-science-2e",
    "title": "Resources",
    "section": "R for Data Science (2e)",
    "text": "R for Data Science (2e)\n\n\n\n\n\nR for Data Science (2e) by Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund is an introductory textbook on getting started with R and tidyverse for data management, analysis and visualisation. It is an excellent source to learn the basics of R, R Studio and tidyverse.\nIt can be used as a reference textbook, especially when you are struggling to recall the syntax. It has many examples to get a grasp (or remember) how to use many base R and tidyverse functions.\nIt is free and available here: https://r4ds.hadley.nz/",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#r-graphics-cookbook",
    "href": "resources.html#r-graphics-cookbook",
    "title": "Resources",
    "section": "R Graphics Cookbook",
    "text": "R Graphics Cookbook\n\n\nR Graphics Cookbook by Winston Chang is a detailed textbook on creating visualisations in R via using ggplot2.\nIt is free and available here: https://r-graphics.org/",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "resources.html#ggplot2-elegant-graphics-for-data-analysis-3e",
    "href": "resources.html#ggplot2-elegant-graphics-for-data-analysis-3e",
    "title": "Resources",
    "section": "ggplot2: Elegant Graphics for Data Analysis (3e)",
    "text": "ggplot2: Elegant Graphics for Data Analysis (3e)\n\n\n\n\n\nThis book explains the underlying theory behind ggplot2. It is available here: https://ggplot2-book.org/",
    "crumbs": [
      "Resources"
    ]
  },
  {
    "objectID": "02_data_in_R.html",
    "href": "02_data_in_R.html",
    "title": "2  Data in R",
    "section": "",
    "text": "2.1 Length of an object\nWe typed names of last eight Prime Ministers and their respective birth years. The number of items in names_pm and birth_years should be both eight. We can see the number of items in a vector by the length() function.\n# Number of items in a vector can be seen by length()\n\n# Length of names_pm:\nlength(names_pm)\n#&gt; [1] 8\n\n# Length of birth_years:\nlength(birth_years)\n#&gt; [1] 8",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#is-equal-to-operator",
    "href": "02_data_in_R.html#is-equal-to-operator",
    "title": "2  Data in R",
    "section": "2.2 is equal to operator",
    "text": "2.2 is equal to operator\nYou can ask R whether two things are equal to each other or not. To do so, we are going to use the == operator, which means is equal to.\n\n# is equal to operator: ==\n\n# is the length of names_pm equal to birth_years\nlength(names_pm) == length(birth_years)\n#&gt; [1] TRUE\n\nThe number of items in both objects (names_pm and birth_years) is the same because both vectors contain eight pieces of information.\nHow about the class of the objects?\n\n# is the class of names_pm equal to birth_years\nclass(names_pm) == class(birth_years)\n#&gt; [1] FALSE\n\nThe class of the objects is not the same because names_pm contains textual information whereas birth_years contains numerical information.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#creating-a-simple-dataset",
    "href": "02_data_in_R.html#creating-a-simple-dataset",
    "title": "2  Data in R",
    "section": "2.3 Creating a simple dataset",
    "text": "2.3 Creating a simple dataset\nLast week we created a simple spreadsheet that looked like the data shown in\nWe can achieve this by doing a column bind which refers to vertically binding two vectors and can be done using the cbind() function.\n\nmy_data &lt;- cbind(names_pm, birth_years)\n\n# let's check the object we created\nmy_data\n#&gt;      names_pm        birth_years\n#&gt; [1,] \"Keir Starmer\"  \"1962\"     \n#&gt; [2,] \"Rishi Sunak\"   \"1980\"     \n#&gt; [3,] \"Liz Truss\"     \"1975\"     \n#&gt; [4,] \"Boris Johnson\" \"1964\"     \n#&gt; [5,] \"Theresa May\"   \"1956\"     \n#&gt; [6,] \"David Cameron\" \"1966\"     \n#&gt; [7,] \"Gordon Brown\"  \"1951\"     \n#&gt; [8,] \"Tony Blair\"    \"1953\"\n\nThe first column in my_data is names_pm and the second column is birth_years. We have now two dimensions: columns and rows.\nRecall that to ask R to bring a specific item in a two-dimensional object, such as a spreadsheet, we can use the square-brackets [] notation but we need to specify both dimension.\n\n\n\n\n\n\nRows and Columns in a Spreadsheet\n\n\n\nFirst dimension refers to rows and second dimension refers to columns.\n\n\nLet’s get the third row in second column.\n\n# Third row in second column\nmy_data[3,2]\n#&gt; birth_years \n#&gt;      \"1975\"\n\nTo sum up, we bound two vectors by column. Each column is a vector. We can call these column vectors. To get the first column, names_pm, we can use the square brackets notation.\n\n# Bring the first column \nmy_data[,1]\n#&gt; [1] \"Keir Starmer\"  \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\"\n#&gt; [5] \"Theresa May\"   \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\n# Bring the second column\nmy_data[,2]\n#&gt; [1] \"1962\" \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\nTo get a specific column vector, we left the first dimension unspecificed. Recall that the first dimension designates the row, so leaving it unspecified means everything.\nWe could also use column names instead of column numbers.\n\n# Bring the column birth_years\nmy_data[,\"birth_years\"]\n#&gt; [1] \"1962\" \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\n# Bring the column names_pm\nmy_data[,\"names_pm\"]\n#&gt; [1] \"Keir Starmer\"  \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\"\n#&gt; [5] \"Theresa May\"   \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nWe can do the same for rows. To get a row vector, use the squared bracket notation.\n\n# Bring the first row\nmy_data[1, ]\n#&gt;       names_pm    birth_years \n#&gt; \"Keir Starmer\"         \"1962\"\n\n# Bring the third row\nmy_data[3,]\n#&gt;    names_pm birth_years \n#&gt; \"Liz Truss\"      \"1975\"\n\n# Bring the fourth row\nmy_data[4,]\n#&gt;        names_pm     birth_years \n#&gt; \"Boris Johnson\"          \"1964\"\n\nR will give you an error message if you go out of bounds.\n\n# Bring the third column\nmy_data[,3]\n#&gt; Error in my_data[, 3]: subscript out of bounds\n\n# Bring the 10th row\n\n# Bring the second column, ninth row\nmy_data[9,2]\n#&gt; Error in my_data[9, 2]: subscript out of bounds\n\n## Data frame\nIt is customary to keep a spreadsheet-like looking data (i.e., two-dimensional) as something called a data frame in R. Let’s check the class of my_data.\n\n# Class of my_data\nclass(my_data)\n#&gt; [1] \"matrix\" \"array\"\n\nIt looks like the class of my_data is matrix and array. Matrix is a two-dimensional array.\nWe can turn my_data into a data frame.\n\n# Turn my_data into data frame\nmy_data &lt;- as.data.frame(my_data)\n# this just overwrote my_data as a data frame\n\n# Check its class\nclass(my_data)\n#&gt; [1] \"data.frame\"\n\nIn this module, we will primarily work with data frames.\nRecall that we can use the $ notation when working with data frames.\n\n# bring names_pm\nmy_data$names_pm\n#&gt; [1] \"Keir Starmer\"  \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\"\n#&gt; [5] \"Theresa May\"   \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\n# bring birth_years\nmy_data$birth_years\n#&gt; [1] \"1962\" \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\n# bring the third item in birth_years\nmy_data$birth_years[3]\n#&gt; [1] \"1975\"\n\nWe can check the number of columns and the number of rows of our data frame by using ncol() and nrow() functions.\n\n# number of columns\nncol(my_data)\n#&gt; [1] 2\n\n# number of rows\nnrow(my_data)\n#&gt; [1] 8\n\nA data frame, such as my_data, has two dimensions: rows and columns. Note that my_data has eight rows and two columns. We can use the dim() function to get the length of each dimension.\n\ndim(my_data)\n#&gt; [1] 8 2\n\n## Variable, Row, Observation\nLet’s check some more terminology that is frequently used in data analysis.\nA column vector typically shows a variable. A row vector typically shows an observation. A particular item, which is a cell in a spreadsheet, is a value. This is visualised in Figure 2.1.\n\n\n\n\n\n\nFigure 2.1: Variables, observations, rows. Well-organised data come in this form.\n\n\n\nWhen data do not come in this format, we will carry out something called data wrangling and reorganize the data so that each column is a variable, each row is an observation and each cell is a value.\nFor simplicity, however, the datasets we are working on already come in this shape.\n\n# A variable: a column (e.g., birth_years)\nmy_data$birth_years\n#&gt; [1] \"1962\" \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\n# An observation: a row (e.g., second row)\nmy_data[2,]\n#&gt;      names_pm birth_years\n#&gt; 2 Rishi Sunak        1980\n\n# A particular value (e.g., third row of second column)\nmy_data[3,2]\n#&gt; [1] \"1975\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#numerical-value-stored-as-character",
    "href": "02_data_in_R.html#numerical-value-stored-as-character",
    "title": "2  Data in R",
    "section": "2.4 Numerical value stored as character",
    "text": "2.4 Numerical value stored as character\nLet’s say we would like to calculate each person’s current age. We could simply tell R to subtract each birth year from current year (2024).\n\n2024 - my_data#| $birth_years\n#&gt; Error in FUN(left, right): non-numeric argument to binary operator\n\nInstead of the calculation, I get an error message: non-numeric argument to…! Let’s see what is going on.\n\n# Check the variable of interest\nmy_data$birth_years\n#&gt; [1] \"1962\" \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\nbirth_years is a vector of numbers but if you look closely, you will see that each number is shown within a pair of quotation mark. This is because R is keeping each number as text at the moment. Let’s look at the class of the object.\n\n# Class of birth_years\nclass(my_data$birth_years)\n#&gt; [1] \"character\"\n\nCharacter means text. We are going to use as.numeric() function to tell R that information stored in birth_years is numerical, not text.\n\n# Convert the variable to numerical\nas.numeric(my_data$birth_years)\n#&gt; [1] 1962 1980 1975 1964 1956 1966 1951 1953\n\nNow quotation marks disappeared. Beware: I have not overwritten the variable yet. It is just displayed on my screen for one time only. I need to overwrite the existing version to make it a permanent change.\n\nmy_data$birth_years &lt;- as.numeric(my_data$birth_years)\n\nThis command tells R to:\n\ngo and get the variable birth_years inside the data frame my_data\nconvert it numeric\ntake the numerical output and assign it over the variable birth_years in the data frame my_data\n\nNow birth_years should be numerical.\n\nclass(my_data$birth_years)\n#&gt; [1] \"numeric\"\n\nNow, we can create the current age variable.\n\n# Calculate the current age\n2023 - my_data$birth_years\n#&gt; [1] 61 43 48 59 67 57 72 70\n\n\n# It is working. Let's assign this output to a new variable\nmy_data$age_current &lt;- 2023 - my_data$birth_years\n\n# Check my_data\nmy_data\n#&gt;        names_pm birth_years age_current\n#&gt; 1  Keir Starmer        1962          61\n#&gt; 2   Rishi Sunak        1980          43\n#&gt; 3     Liz Truss        1975          48\n#&gt; 4 Boris Johnson        1964          59\n#&gt; 5   Theresa May        1956          67\n#&gt; 6 David Cameron        1966          57\n#&gt; 7  Gordon Brown        1951          72\n#&gt; 8    Tony Blair        1953          70",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#categorical-data",
    "href": "02_data_in_R.html#categorical-data",
    "title": "2  Data in R",
    "section": "2.5 Categorical data",
    "text": "2.5 Categorical data\nI would like to add a variable showing the party of each Prime Minister. I can create a vector and add this as a column in my_data.\nFor example, Rishi Sunak is from Conservative Party, Liz Truss is also Conservative. Kier Starmer, Gordon Brown and Tony Blair are Labour.\nWe need a vector where the first item is Labour, followed by five Conservative, and two Labour at the end.\nWe could write it one by one in order. It would be long and cumbersome, but it would do the job.\n\nparties_long_version &lt;-  c(\"Labour\", # first item Labour\n                                \"Conservative\", # followed by five Conservative (1)\n                                \"Conservative\", # (2)\n                                \"Conservative\", # (3)\n                                \"Conservative\", # (4)\n                                \"Conservative\", # (5)\n                                \"Labour\", # This corresponds to Gordon Brown\n                                \"Labour\" # Finally, Tony Blair\n                                )\n\nLet’s check the object we created.\n\nparties_long_version\n#&gt; [1] \"Labour\"       \"Conservative\" \"Conservative\" \"Conservative\" \"Conservative\"\n#&gt; [6] \"Conservative\" \"Labour\"       \"Labour\"\n\nThis looks good. I could assign it into a new column in my_data. But we are learning, so let’s try another and faster-to-write way.\nInstead of repeating Conservative five times, I could use the repeat function: rep().\n\n# rep() repeats an input n times\nrep(\"Conservative\", 5)\n#&gt; [1] \"Conservative\" \"Conservative\" \"Conservative\" \"Conservative\" \"Conservative\"\n\nUsing this approach, I can build the vector again. I need one “Labour”, five “Conservative”, and two “Labour”, in this order. I need to combine them using (c).\n\nparties_short_version &lt;-  c(\"Labour\",\n                            rep(\"Conservative\", 5),\n                            rep(\"Labour\", 2))\n\nLet’s check the object we created\n\nparties_short_version\n#&gt; [1] \"Labour\"       \"Conservative\" \"Conservative\" \"Conservative\" \"Conservative\"\n#&gt; [6] \"Conservative\" \"Labour\"       \"Labour\"\n\nBoth versions should be the same, meaning parties_long_version should be equal to parties_short_version.\n\nparties_long_version == parties_short_version \n#&gt; [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nNow, let’s put it into my data frame.\n\nmy_data$party &lt;- parties_short_version\n\nLet’s check the data frame.\n\nmy_data\n#&gt;        names_pm birth_years age_current        party\n#&gt; 1  Keir Starmer        1962          61       Labour\n#&gt; 2   Rishi Sunak        1980          43 Conservative\n#&gt; 3     Liz Truss        1975          48 Conservative\n#&gt; 4 Boris Johnson        1964          59 Conservative\n#&gt; 5   Theresa May        1956          67 Conservative\n#&gt; 6 David Cameron        1966          57 Conservative\n#&gt; 7  Gordon Brown        1951          72       Labour\n#&gt; 8    Tony Blair        1953          70       Labour",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#counting-frequencies-using-table",
    "href": "02_data_in_R.html#counting-frequencies-using-table",
    "title": "2  Data in R",
    "section": "2.6 Counting frequencies using table ()",
    "text": "2.6 Counting frequencies using table ()\nLet’s see how many individuals from each party is in my data frame. You could count it one by one in a small data set such as this one. I can see that there are 5 Conservatives and three Labour, but imagine that it was a large dataset where counting manually was not an option.\nWe can use table() function to achieve this.\n\ntable(my_data$party)\n#&gt; \n#&gt; Conservative       Labour \n#&gt;            5            3",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#saving-data",
    "href": "02_data_in_R.html#saving-data",
    "title": "2  Data in R",
    "section": "2.7 Saving data",
    "text": "2.7 Saving data\nIn the final step, we will learn how to save a data frame such as my_data for future use. We have a few options:\n\nWrite my_data into a spreadsheet-like file.\nSave the whole R environment with all the objects inside.\n\nWe will cover option #1 here.\nYou have probably used Microsoft Excel (or Google Sheets) to work on spreadsheets before. There are different spreadsheet file types (such as Excels .xlsx), but the most common and compatible one is .csv, which stands for comma separated values. This is basically plain text that any computer and most electronic devices can open.\n\nwrite.csv(x = my_data, file = \"my_first_file.csv\", row.names = F)\n\nThis should create a file somewhere in your computer, more precisely, in your working directory. Let’s see where it has saved the file by looking at the working directory.\n\ngetwd()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  },
  {
    "objectID": "02_data_in_R.html#working-directory",
    "href": "02_data_in_R.html#working-directory",
    "title": "2  Data in R",
    "section": "2.8 Working directory",
    "text": "2.8 Working directory\ngetwd() means get working directory. Working directory is your default file path. This is where R looks for files and saves any output.\nWorking directory can be different in each computer. R Studio has nice tools for navigation.\nYou can directly go to your working directory through Files tab (usually in right bottom corner) and using the More drop-down menu. Under there there are a few options:\n\nSet as working directory: sets your working directory as the current directory shown in Files\nGo to working directory: takes you to current working directory\n\nIf you click on go to working directory, you should see my_first_file.csv here.\nIt is a good idea to create a new directory (folder for Windows) for this module. Your folder names should be simple and easy to write. For example: research_methods is a good name.\nTry not to use space in file names. Underscore or dash are better alternatives. Also, I encourage always using lowercase for file names, which also goes for object names in R.\nYou can use your operating system to create this directory. You could also use R Studio’s Files tab. Put this folder somewhere easy to access.\nLet’s save your R script. You can use drop-down menu: File &gt;&gt; Save OR simply by using the keyboard shortcut .\nGive an intuitive name to your script. For example, learn_02.R is a good name.\nIt is generally good idea to keep your data in a sub-directory named data. Create such a directory and move my_first_file.csv there.\nNext week, we will continue with a simple dataset, which will be available on Blackboard.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data in R</span>"
    ]
  }
]